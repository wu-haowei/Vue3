# 🚀 自動部署到 GitHub Pages 的工作流程
name: 我的應用程式

on:
  # ✅ 當推送到 main 分支時執行
  push:
    branches: ['main']

  # ✅ 手動觸發部署（從 Actions 頁面）
  workflow_dispatch:

# ✅ 設定權限，允許寫入 Pages
permissions:
  contents: read
  pages: write
  id-token: write

# ✅ 同時間只允許一個部署進行中
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: 把 GitHub Repo 的程式碼抓下來
        uses: actions/checkout@v4

      - name: 安裝指定版本的 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 安裝相依套件
        run: npm ci

      - name:  建立 .env 並加入環境機密參數
        run: |
          echo "VITE_GEMINI=${{ secrets.VITE_GEMINI }}" > .env
          echo "VITE_OPENAI=${{ secrets.VITE_OPENAI }}" >> .env
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
          echo "VITE_WEBSOCKET_URL=${{ secrets.VITE_WEBSOCKET_URL }}" >> .env

      - name: 執行 Vite 的建置指令（編譯出 dist）
        run: npm run build

      - name: 設定 GitHub Pages 發佈環境
        uses: actions/configure-pages@v4

      - name: 上傳編譯好的 dist 資料夾
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: 正式部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  push-docker:
    runs-on: ubuntu-latest
    needs: deploy  # ✅ 可選：等 deploy-pages 完成再執行
    steps:
      - name: 📥 再次下載原始碼（Docker 建構也需要）
        uses: actions/checkout@v4

      - name: 🔐 登入 Docker Hub 帳號
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🐳 建立並推送 Docker 映像檔（latest 標籤）
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/program:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/program:latest